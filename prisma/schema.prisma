// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String   @unique
  name     String
  password String
  images   String[]

  exerciseLogs ExerciseLog[]
  workoutLogs  WorkoutLog[]
}

model Workout {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  exercises   Exercise[]
  workoutLogs WorkoutLog[]
}

model Exercise {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  times    Int
  iconPath String @map("icon_path")

  workouts Workout[]

  exerciseLog   ExerciseLog? @relation(fields: [exerciseLogId], references: [id])
  exerciseLogId Int?         @map("exercise_log_id")
}

model ExerciseLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean        @default(false) @map("is_completed")
  times       ExerciseTime[]

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")

  workoutLog   WorkoutLog? @relation(fields: [workoutLogId], references: [id])
  workoutLogId Int?        @map("workout_log_id")

  exercise Exercise[]

  @@map("Exercise_log")
}

model ExerciseTime {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  weight      Int     @default(0)
  repeat      Int     @default(0)
  isCompleted Boolean @default(false) @map("is_completed")

  exerciseLog   ExerciseLog? @relation(fields: [exerciseLogId], references: [id])
  exerciseLogId Int?         @map("exercise_log_id")

  @@map("Exercise_time")
}

model WorkoutLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean @default(false) @map("is_completed")

  exerciseLogs ExerciseLog[]

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")

  workout   Workout? @relation(fields: [workoutId], references: [id])
  workoutId Int?     @map("workout_id")

  @@map("Workout_log")
}
